 /*
const variables = {};

data = fs.readFileSync('test.lic').toString();

data = data.split('\n');

interpret = (command, args) => {
    if (command.toLowerCase() === 'console') {
        if (args[0].toLowerCase() === 'echo') {
            if (args[1].toLowerCase() === 'text') {
                message = args.slice(2).join(' ')
                interpreted = `console.log(${message});`
            } else if (args[1].toLowerCase() === 'variables') {
                args = args.slice(2);
                message = `""` 
                index = 0;
                for (const t of args) {
                    if (index === 0) {
                        message = `${message} + ${t}`
                    } else {
                        message = `${message} + ' ' + ${t}`
                    }
                    index += 1;
                }
                interpreted = `console.log(${message});`
            } else if (args[1].toLowerCase() === 'object') {
                variable = args.slice(2);
                interpreted = `console.log(${variable});`
            } else if (args[1].toLowerCase() === 'list') {
                variable = args.slice(2);
                interpreted = "console.log(" + `${variable.join(', ')}` + ");"
            }
        }
    } else if (command.toLowerCase() === 'var') {
        if (args[0].toLowerCase() === 'modular') {
            if (args[1].toLowerCase() === 'lic') {
                if (args[2].toLowerCase() === 'import') {
                    command_and_args = line.slice(1).split(' ');
                    c = command_and_args[0];
                    a = command_and_args.slice(1);
                    interpret(command, args);

                } else if (args[2].toLowerCase() === 'define') {
                    command_and_args = line.slice(1).split(' ');
                    c = command_and_args[0];
                    a = command_and_args.slice(1);
                    interpret(command, args);

                } /*else if (args[2].toLowerCase() === 'install') {
                    command_and_args = line.slice(1).split(' ');
                    c = command_and_args[0];
                    a = command_and_args.slice(1);
                    interpret(command, args);

                }*//*
            } else if (args[1].toLowerCase() === 'js') {
                if (args[1].toLowerCase() === 'import') {
                    command_and_args = line.slice(1).split(' ');
                    c = command_and_args[0];
                    a = command_and_args.slice(1);

                } else if (args[1].toLowerCase() === 'install') {
                    command_and_args = line.slice(1).split(' ');
                    c = command_and_args[0];
                    a = command_and_args.slice(1);
                    interpret(command, args);
                }
            }
        } else if (args[0].toLowerCase() === 'tree') {
            if (args[1].toLowerCase() === 'root') {
                interpreted = `${args[2]} = {};`
            } else if (args[1].toLowerCase() === 'branch') {
                interpreted = `${args[4]}['${args[2]}'] = {};`
            } else if (args[1].toLowerCase() === 'list') {
                interpreted = `${args[4]}['${args[2]}'] = [];`
            }
        } else if (args[0].toLowerCase() === 'list') {
            vars = args.slice(2)
            interpreted = `var ${args[1]} = [${vars.join(', ')}]`
            //console.log(interpreted);
        } else if (args[0].toLowerCase() === 'singular') {
            interpreted = `var ${args[1]} = ${args.slice(2).join(' ')};`
        }
    } else if (command.toLowerCase() === 'if') {
        if (args[1] === 'is') {
            interpreted = `if (${args[0]} === ${args[2]}) {`
        }
    } else if (command.toLowerCase() === 'elif') {
        if (args[1] === 'is') {
            interpreted = `if (${args[0]} === ${args[2]}) {`
        } else if (args[1] === "isn't") {
            interpreted = `if (!${args[0]} === ${args[2]}) {`
        }
    } else if (command.toLowerCase() === 'end') {
        interpreted = `}`;
    } else if (command.toLowerCase() === 'else') {
        interpreted = '} else {'
    }
    return interpreted;
    }*/
/*
test = []
for (const line of data) {
    command_and_args = line.split(' ');
    command = command_and_args[0];
    args = command_and_args.slice(1);
    interpreted = interpret(command, args);
    test.push(interpreted)
}
*/
//console.log(test)
//test = test.join('\n')
//console.log(test)
//eval(test).catch(err => console.log(err + " test"))
/*
tester = require('./commands/console.js');
testa = require('./commands/var.js')
eval(tester.interpret(['echo', 'singular', "'test this is a test'"]))
eval(testa.interpret(['singular', 'test', "'this is a test'"]))
eval(tester.interpret(['echo', 'variables', "test"]))
*/
 